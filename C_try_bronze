#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <math.h>

typedef struct entity_s{
    int base_x;
    int base_y;
    int ent_count;
    int id;
    // 0=monster, 1=your hero, 2=opponent hero
    int type;
    // Position of this entity
    int x;
    int y;
    // Count down until shield spell fades
    int shield_life;
    // Remaining health of this monster
    int is_controlled;
    int health;
    // Trajectory of this monster
    int vx;
    int vy;
    // 0=monster with no target yet, 1=monster targeting a base
    int near_base;
    // Given this monster's trajectory, is it a threat to 1=your base, 2=your opponent's base, 0=neither
    int threat_for;
    int danger;
}   entity_t;

typedef struct hero_s{
    int base_x;
    int base_y;
    int ent_count;
    int id;
    char *name;
    int x;
    int y;
    int mana;
}   hero_t;

typedef struct s_place{
    int radius;
    float wing_angle;
    float center_angle;
    int i;
}   r_place;

typedef struct s_dot{
    int x;
    int y;
    int v_x;
    int v_y;
}   t_dot;

int Abs(int a)
{
    if (a < 0)
        return (-a);
    return (a);
}

int dist(int a, int b, int x, int y)
{
    return (sqrt((x - a) * (x - a)  + (y - b) * (y - b)));
}

t_dot   def_placement(hero_t hero, r_place pos)
{
    t_dot   coords;

    if (hero.base_x < 1000)
    {
        if (pos.i == 0)
        {
            coords.x = cos(pos.wing_angle) * pos.radius;
            coords.y = sin(pos.wing_angle) * pos.radius;
        }
        else if (pos.i == 1)
        {
            coords.x = cos(pos.center_angle) * (pos.radius + 10000);
            coords.y = sin(pos.center_angle) * (pos.radius + 3500);
        }
        else if (pos.i == 2)
        {
            coords.x = sin(pos.wing_angle) * pos.radius;
            coords.y = cos(pos.wing_angle) * pos.radius;
        }
    }
    else
    {
        if (pos.i == 0)
        {
            coords.x = 18000 - cos(pos.wing_angle) * pos.radius;
            coords.y = 9000 - sin(pos.wing_angle) * pos.radius;
        }
        else if (pos.i == 1)
        {
            coords.x = 18000 - cos(pos.center_angle) * (pos.radius + 10000);
            coords.y = 9000 - sin(pos.center_angle) * (pos.radius + 3500);
        }
        else if (pos.i == 2)
        {
            coords.x = 18000 - sin(pos.wing_angle) * pos.radius;
            coords.y = 9000 - cos(pos.wing_angle) * pos.radius;
        }
    }
    return (coords);
}

entity_t *is_closer(entity_t *new, entity_t *target)
{
    if (!target && new->type)
        return (NULL);
    else if (!target && !new->type || new->near_base == 1 && target->near_base == 0 || dist(new->x, new->y, new->base_x, new->base_y) < dist(target->x, target->y, target->base_x, target->base_y))
        return (new);
    else
        return (target);
}

entity_t *is_closer_to_enemy(entity_t *new, entity_t *target)
{
    if (!target)
        return (new);
    else if ((new->threat_for == 2 && dist(new->x, new->y, Abs(new->base_x - 18000), Abs(new->base_y - 9000)) < dist(target->x, target->y, Abs(target->base_x - 18000), Abs(target->base_y - 9000))))
        return (new);
    else if ((!new->type && dist(new->x, new->y, Abs(new->base_x - 18000), Abs(new->base_y - 9000)) < dist(target->x, target->y, Abs(target->base_x - 18000), Abs(target->base_y - 9000))))
        return (new);
    else if (new->type == 2)
        return (new);
    else
        return (target);
}

entity_t *closest_monster(entity_t *ents)
{
    entity_t *target_monster;

    target_monster = NULL;
    for (int i = 0; i < ents->ent_count; i++)
    {
        if (!ents[i].type && ents[i].threat_for == 1 && dist(ents->base_x, ents->base_y, ents[i].x, ents[i].y) < 9000)
            target_monster = is_closer(&ents[i], target_monster);
    }
    if (target_monster != NULL && dist(ents->base_x, ents->base_y, target_monster->x, target_monster->y) < 3000)
        target_monster->danger = 1;
    return (target_monster);
}

entity_t *closest_to_enemy(entity_t *ents)
{
    entity_t *target_hero;

    target_hero = NULL;
    for (int i = 0; i < ents->ent_count; i++)
    {
        if ((ents[i].type == 2 || !ents[i].type) && dist(Abs(ents->base_x - 18000), Abs(ents->base_y - 9000), ents[i].x, ents[i].y) < 8500)
            target_hero = is_closer_to_enemy(&ents[i], target_hero);
    }
    return (target_hero);
}

t_dot intercept(hero_t *hero, entity_t *monster)
{
    int distance;
    t_dot   cap;

    distance = dist(hero->x, hero->y, monster->x, monster->y);
    cap.x = monster->x/* + monster->vx * (distance / 1500)*/;
    cap.y = monster->y/* + monster->vy * (distance / 1500)*/;
    return (cap);
}

t_dot attack(hero_t *hero, entity_t *monster)
{
    int distance;
    t_dot   cap;

    distance = dist(hero->x, hero->y, monster->x, monster->y);
    cap.x = monster->x/* + monster->vx * (distance / 1500)*/;
    cap.y = monster->y/* + monster->vy * (distance / 1500)*/;
    return (cap);
}

t_dot fus_roh_dah(hero_t *hero, int i)
{
    t_dot   cap;
    int vx;
    int vy;
    if (!i)
    {
        vx = hero->x - hero->base_x;
        vy = hero->y - hero->base_y;
    }
    else
    {
        vx = Abs(hero->base_x - 18000) - hero->x;
        vy = Abs(hero->base_y - 9000) - hero->y;
    }
    cap.x = hero->x + vx;
    cap.y = hero->y + vy;
    return (cap);
}

int main()
{
    // The corner of the map representing your base
    int base_x;
    int base_y;
    scanf("%d%d", &base_x, &base_y);
    // Always 3
    int heroes_per_player;
    scanf("%d", &heroes_per_player);
    hero_t  *heroes;
    heroes = malloc(sizeof(hero_t) * 3);
    // game loop
    while (1) {
        for (int i = 0; i < 2; i++) {
            // Each player's base health
            int health;
            int mana;
            heroes->mana = mana;
            scanf("%d%d", &health, &mana);
        }
        // Amount of heros and monsters you can see
        int entity_count;
        scanf("%d", &entity_count);
        entity_t *ents;
        ents = malloc(sizeof(entity_t) * entity_count);
        for (int i = 0; i < entity_count; i++) {
            scanf("%d%d%d%d%d%d%d%d%d%d%d", &ents[i].id, &ents[i].type, &ents[i].x, &ents[i].y, &ents[i].shield_life, &ents[i].is_controlled, &ents[i].health, &ents[i].vx, &ents[i].vy, &ents[i].near_base, &ents[i].threat_for);
            ents[i].base_x = base_x;
            ents[i].base_y = base_y;
            ents[i].ent_count = entity_count;
            ents[i].danger = 0;
        }
        int j = 0;
        for (int i = 0; i < entity_count; i++)
        {
            if (ents[i].type == 1)
            {
                heroes[j].x = ents[i].x;
                heroes[j].y = ents[i].y;
                heroes[j].id = ents[i].id;
                heroes[j].base_x = base_x;
                heroes[j].base_y = base_y;
                if (j == 0)
                    heroes[j].name = "Legolas";
                else if (j == 1)
                    heroes[j].name = "Aragorn";
                else if (j == 2)
                    heroes[j].name = "Gimli";
                j++;
            }
        }
        r_place pos;
        pos.radius = 6000;
        pos.wing_angle = 3.14 / 8;
        pos.center_angle = 3.14 / 4;
        for (int i = 0; i < heroes_per_player; i++){
            t_dot cap;
            t_dot out_vect;
            entity_t *target;
            //Gimli and Legolas defend
            if (i == 0 || i == 2)
            {
                target = closest_monster(ents);
                // No monsters in sight
                if (!target)
                {
                    pos.i = i;
                    cap = def_placement(heroes[i], pos);
                    printf("MOVE %d %d %s\n", cap.x, cap.y, heroes[i].name);
                }
                else
                {
                    cap = intercept(&heroes[i], target);
                    out_vect = fus_roh_dah(&heroes[i], 0);
                    if (target->danger == 1 && heroes->mana > 10 && dist(heroes[i].x, heroes[i].y, target->x, target->y) <= 1280 && !target->shield_life && target->health > 10)
                        printf("SPELL WIND %d %d %s\n", out_vect.x, out_vect.y, heroes[i].name);
                    else if (dist(heroes[i].base_x, heroes[i].base_y, target->x, target->y) > 7500 && target->health > 20 && !target->is_controlled && heroes->mana > 30)
                        printf("SPELL CONTROL %d %d %d\n", target->id, out_vect.x, out_vect.y);
                    else
                        printf("MOVE %d %d %s\n", cap.x, cap.y, heroes[i].name);
                }
            }
            //Aragorn attacks
            else
            {
                target = closest_to_enemy(ents);
                if (!target)
                {
                    pos.i = i;
                    cap = def_placement(heroes[i], pos);
                    printf("MOVE %d %d %s\n", cap.x, cap.y, heroes[i].name);
                }
                else
                {
                    out_vect = fus_roh_dah(&heroes[i], 1);
                    cap = attack(&heroes[i], target);
                    if (dist(heroes[i].x, heroes[i].y, target->x, target->y) <= 1280 && heroes->mana > 20 && !target->type && !target->shield_life && (target->health > 12 || dist(Abs(heroes[i].base_x - 18000), Abs(heroes[i].base_y), target->x, target->y) < 2500))
                        printf("SPELL WIND %d %d %s\n", out_vect.x, out_vect.y, heroes[i].name);
                    else if (dist(heroes[i].x, heroes[i].y, target->x, target->y) <= 2200 && target->near_base == 1 && heroes->mana > 20 && dist(Abs(heroes[i].base_x - 18000), Abs(heroes[i].base_y), target->x, target->y) > 2000 && target->health > 14 && !target->shield_life)
                        printf("SPELL SHIELD %d\n", target->id);
                    else if (dist(heroes[i].x, heroes[i].y, target->x, target->y) > 850)
                        printf("MOVE %d %d %s\n", cap.x, cap.y, heroes[i].name);
                    else
                        printf("WAIT %s\n", heroes[i].name);
                }
            }
            // To debug: fprintf(stderr, "Debug messages...\n")
        }
        free(ents);
    }
    return 0;
}
